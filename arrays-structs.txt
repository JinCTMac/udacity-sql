Arrays and Structs in SQL
(see https://medium.com/google-cloud/how-to-work-with-array-and-structs-in-bigquery-9c0a2ea584a6)
(and https://towardsdatascience.com/explore-arrays-and-structs-for-better-performance-in-google-bigquery-8978fb00a5bc#:~:text=An%20array%20is%20a%20data,records%20are%20arrays%20of%20structs)

What are arrays and structs?
- Arrays and structs are data types in SQL.
- They have a big performance advantage over normalised data, where data is stored in multiple tables to reduce storage costs, and un-normalised data where certain columns are repeated to improve query performance by reducing the need for additional tables to hold data.
- Arrays and structs use rows where data can be nested inside array and JSON/object-like structures, allowing us to store multiple pieces of information in a single row instead of multiple rows. This allows us to experience the performance benefits of un-normalised database data and reduce data redundancy like in normalised data.

What do arrays and structs look like in SQL?
- Arrays in SQL/Google Bigquery look just like arrays in other languages, so data enclosed inside of [] brackets - however, unlike some other languages, the data inside of an array MUST be of the same data type:
  - address_history:["current", "previous", "birth"]
- An array has nested values, so if you look at a data field that has the mode "REPEATED" in it, then it is an array.

- Structs are data types that store data in key-value pairs, just like JS objects and dictionaries in Python
  - address_history: {
    "status": "current",
    "address": "London",
    "postcode": "ABC123D"
  }
- Structs differ from arrays in that they have many key-value pairs, and thus when we want to access data inside of a struct, we need to use dot notation to access that data i.e. address_history.address, alongside usually having the data type of "RECORD" to indicate the presence of a struct.

- You can also have an array of structs, allowing us to store multiple rows of information.
- address_history: [
    { “status”:”current”, “address”:”London”, “postcode”:”ABC123D” },
    { “status”:”previous”, “address”:”New Delhi”, “postcode”:”738497" },
    { “status”:”birth”, “address”:”New York”, “postcode”:”SHI747H” }
  ]

- You can create an array table like so:


# Create a simple array with square brackets
#standardSQL
CREATE OR REPLACE TABLE `array-and-struct.array.restaurant_cuisine` AS (
SELECT "Cafe Paci" AS name, "Newtown" AS location, ["European", "Casual", "Wine bar"] AS cuisine_array
UNION ALL
SELECT "Ho Jiak" AS name, "Haymarket" AS location, ["Malaysian", "Street-food"] AS cuisine_array
UNION ALL
SELECT "Spice I Am" AS name, "Surry Hills" AS location, ["Thai", "Casual"] AS cuisine_array
UNION ALL
SELECT "Chaco Bar" AS name, "Potts Point" AS location, ["Japanese", "Yakitori", "Casual"] AS cuisine_array);


How to query arrays/structs/an array of structs?

Arrays:
  - To query arrays, we can just select that column from a table using a simple SELECT statement. However, this will return the array as a group, essentially only returning one row of data. If we want to see all the elements in the array ungrouped, we need to use the UNNEST keyword.

  SELECT addr
  FROM array_test
  UNNEST [address_history] AS addr;

  SELECT name, location, cuisine
  FROM `array-and-struct.array.restaurant_cuisine`, UNNEST(cuisine_array) AS cuisine;

Structs:
  - Structs do not need unnesting, and will return all of the key value pairs inside of a struct as a signle row. However, if you want to access singular values inside of the struct, you can use dot notation as you would with objects/dictionaries in other languages, i.e. address_history.status

Array of structs:
  - If we query an array of structs column, it will return a singular row, containing each of the key-value pairs for each struct in the array. If you want to select certain keys from the array of structs, you again need to UNNEST that array.

  SELECT addr
  FROM array_test
  UNNEST [address_history] AS addr;

  You can also select just a few columns from the structs instead of the whole structs using dot notation.

  SELECT addr.status, addr.address
  FROM array_test
  UNNEST [address_history] AS addr;

Creating arrays, structs and array of structs:

-- Create Array (REPEATED)
create table testing.array_demo as
with a as (
select ["current", "previous", "birth"] as address_history
)
select address_history from a;


-- Create Struct (RECORD)
create table testing.struct_demo as
with a as (
select struct("current" as status,"London" as address, "ABC123D" as postcode) as address_history
)
select address_history from a;


-- Create Array of Struct (RECORD REPEATED)
create table testing.array_of_struct_demo as
with a as (
select [struct("current" as status,"London" as address, "ABC123D" as postcode),
        struct("previous" as status,"New Delhi" as address, "738497" as postcode),
        struct("birth" as status,"New York" as address, "SHI747H" as postcode)]as address_history
)
select address_history from a;
